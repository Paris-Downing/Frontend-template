{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8080/api/lessons';\nexport let TutorialService = /*#__PURE__*/(() => {\n  class TutorialService {\n    /*\r\n      http is something that helps us connect the frontend to the backend\r\n      the service is specifically for that, so it needs the http tool to do that\r\n      to have access to the http, we have to inject it into the service, so we use @Injectable to create a global instance\r\n      by using it in the constructor, we can access it locally too\r\n      Anytime we want to use functions from this service, we can inject it into components (see tutorials-list component)\r\n    */\n    constructor(http) {\n      this.http = http;\n      this.chapter = 1;\n      this.lesson = 1;\n    }\n\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n\n    get() {\n      return this.http.get(`${baseUrl}/${this.chapter}/${this.lesson}`);\n    }\n\n    getChapter() {\n      return this.chapter;\n    }\n\n    setChapter(chapter) {\n      this.chapter = chapter;\n    }\n\n    setLesson(lesson) {\n      this.lesson = lesson;\n    }\n\n    create(data) {\n      return this.http.post(baseUrl, data);\n    }\n\n    update(id, data) {\n      return this.http.put(`${baseUrl}/${id}`, data);\n    }\n\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`);\n    }\n\n    deleteAll() {\n      return this.http.delete(baseUrl);\n    }\n\n    findByTitle(title) {\n      return this.http.get(`${baseUrl}?title=${title}`);\n    }\n\n  }\n\n  TutorialService.ɵfac = function TutorialService_Factory(t) {\n    return new (t || TutorialService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TutorialService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TutorialService,\n    factory: TutorialService.ɵfac,\n    providedIn: 'root'\n  });\n  return TutorialService;\n})();","map":null,"metadata":{},"sourceType":"module"}